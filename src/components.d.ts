/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppRoot {
    }
    interface AwesomeIcon {
    }
    interface BookChapter {
        "frontMatter": string;
    }
    interface BookHintType {
    }
    interface BookImg {
        /**
          * The image alt text.
         */
        "alt": string;
        "captionFmt": string;
        /**
          * The one-based index of the image in the current document.
         */
        "counter": number;
        /**
          * The image source.
         */
        "src": string;
    }
    interface BookLink {
        "href": string;
    }
    interface BookSection {
        /**
          * Path to this section - section will expand when navigated to this path
         */
        "path": string;
    }
    interface BookSidebar {
        /**
          * Default path to load table of content
         */
        "tocPath": string;
    }
    interface BookSidebarState {
        /**
          * relative link to the page to be loaded
         */
        "href": string;
    }
    interface CodeHighlight {
        /**
          * the language of the code. If language is not included you may use {@link CodeHighlight.code_highlight}  property to register additional languages and aliases. The {@link CodeHighlight.code_highlight} is  instance of highlight.js library.
         */
        "language": string;
    }
    interface MatIcon {
    }
    interface MdlMenu {
    }
    interface MdlSidebar {
    }
}
export interface BookSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBookSidebarElement;
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAwesomeIconElement extends Components.AwesomeIcon, HTMLStencilElement {
    }
    var HTMLAwesomeIconElement: {
        prototype: HTMLAwesomeIconElement;
        new (): HTMLAwesomeIconElement;
    };
    interface HTMLBookChapterElement extends Components.BookChapter, HTMLStencilElement {
    }
    var HTMLBookChapterElement: {
        prototype: HTMLBookChapterElement;
        new (): HTMLBookChapterElement;
    };
    interface HTMLBookHintTypeElement extends Components.BookHintType, HTMLStencilElement {
    }
    var HTMLBookHintTypeElement: {
        prototype: HTMLBookHintTypeElement;
        new (): HTMLBookHintTypeElement;
    };
    interface HTMLBookImgElement extends Components.BookImg, HTMLStencilElement {
    }
    var HTMLBookImgElement: {
        prototype: HTMLBookImgElement;
        new (): HTMLBookImgElement;
    };
    interface HTMLBookLinkElement extends Components.BookLink, HTMLStencilElement {
    }
    var HTMLBookLinkElement: {
        prototype: HTMLBookLinkElement;
        new (): HTMLBookLinkElement;
    };
    interface HTMLBookSectionElement extends Components.BookSection, HTMLStencilElement {
    }
    var HTMLBookSectionElement: {
        prototype: HTMLBookSectionElement;
        new (): HTMLBookSectionElement;
    };
    interface HTMLBookSidebarElement extends Components.BookSidebar, HTMLStencilElement {
    }
    var HTMLBookSidebarElement: {
        prototype: HTMLBookSidebarElement;
        new (): HTMLBookSidebarElement;
    };
    interface HTMLBookSidebarStateElement extends Components.BookSidebarState, HTMLStencilElement {
    }
    var HTMLBookSidebarStateElement: {
        prototype: HTMLBookSidebarStateElement;
        new (): HTMLBookSidebarStateElement;
    };
    interface HTMLCodeHighlightElement extends Components.CodeHighlight, HTMLStencilElement {
    }
    var HTMLCodeHighlightElement: {
        prototype: HTMLCodeHighlightElement;
        new (): HTMLCodeHighlightElement;
    };
    interface HTMLMatIconElement extends Components.MatIcon, HTMLStencilElement {
    }
    var HTMLMatIconElement: {
        prototype: HTMLMatIconElement;
        new (): HTMLMatIconElement;
    };
    interface HTMLMdlMenuElement extends Components.MdlMenu, HTMLStencilElement {
    }
    var HTMLMdlMenuElement: {
        prototype: HTMLMdlMenuElement;
        new (): HTMLMdlMenuElement;
    };
    interface HTMLMdlSidebarElement extends Components.MdlSidebar, HTMLStencilElement {
    }
    var HTMLMdlSidebarElement: {
        prototype: HTMLMdlSidebarElement;
        new (): HTMLMdlSidebarElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "awesome-icon": HTMLAwesomeIconElement;
        "book-chapter": HTMLBookChapterElement;
        "book-hint-type": HTMLBookHintTypeElement;
        "book-img": HTMLBookImgElement;
        "book-link": HTMLBookLinkElement;
        "book-section": HTMLBookSectionElement;
        "book-sidebar": HTMLBookSidebarElement;
        "book-sidebar-state": HTMLBookSidebarStateElement;
        "code-highlight": HTMLCodeHighlightElement;
        "mat-icon": HTMLMatIconElement;
        "mdl-menu": HTMLMdlMenuElement;
        "mdl-sidebar": HTMLMdlSidebarElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface AwesomeIcon {
    }
    interface BookChapter {
        "frontMatter"?: string;
    }
    interface BookHintType {
    }
    interface BookImg {
        /**
          * The image alt text.
         */
        "alt"?: string;
        "captionFmt"?: string;
        /**
          * The one-based index of the image in the current document.
         */
        "counter"?: number;
        /**
          * The image source.
         */
        "src"?: string;
    }
    interface BookLink {
        "href"?: string;
    }
    interface BookSection {
        /**
          * Path to this section - section will expand when navigated to this path
         */
        "path"?: string;
    }
    interface BookSidebar {
        /**
          * Rised when the menu buttom is clicked indicating the user want to close menu sidebar
         */
        "onMenuClosed"?: (event: BookSidebarCustomEvent<any>) => void;
        /**
          * Default path to load table of content
         */
        "tocPath"?: string;
    }
    interface BookSidebarState {
        /**
          * relative link to the page to be loaded
         */
        "href"?: string;
    }
    interface CodeHighlight {
        /**
          * the language of the code. If language is not included you may use {@link CodeHighlight.code_highlight}  property to register additional languages and aliases. The {@link CodeHighlight.code_highlight} is  instance of highlight.js library.
         */
        "language"?: string;
    }
    interface MatIcon {
    }
    interface MdlMenu {
    }
    interface MdlSidebar {
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "awesome-icon": AwesomeIcon;
        "book-chapter": BookChapter;
        "book-hint-type": BookHintType;
        "book-img": BookImg;
        "book-link": BookLink;
        "book-section": BookSection;
        "book-sidebar": BookSidebar;
        "book-sidebar-state": BookSidebarState;
        "code-highlight": CodeHighlight;
        "mat-icon": MatIcon;
        "mdl-menu": MdlMenu;
        "mdl-sidebar": MdlSidebar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "awesome-icon": LocalJSX.AwesomeIcon & JSXBase.HTMLAttributes<HTMLAwesomeIconElement>;
            "book-chapter": LocalJSX.BookChapter & JSXBase.HTMLAttributes<HTMLBookChapterElement>;
            "book-hint-type": LocalJSX.BookHintType & JSXBase.HTMLAttributes<HTMLBookHintTypeElement>;
            "book-img": LocalJSX.BookImg & JSXBase.HTMLAttributes<HTMLBookImgElement>;
            "book-link": LocalJSX.BookLink & JSXBase.HTMLAttributes<HTMLBookLinkElement>;
            "book-section": LocalJSX.BookSection & JSXBase.HTMLAttributes<HTMLBookSectionElement>;
            "book-sidebar": LocalJSX.BookSidebar & JSXBase.HTMLAttributes<HTMLBookSidebarElement>;
            "book-sidebar-state": LocalJSX.BookSidebarState & JSXBase.HTMLAttributes<HTMLBookSidebarStateElement>;
            "code-highlight": LocalJSX.CodeHighlight & JSXBase.HTMLAttributes<HTMLCodeHighlightElement>;
            "mat-icon": LocalJSX.MatIcon & JSXBase.HTMLAttributes<HTMLMatIconElement>;
            "mdl-menu": LocalJSX.MdlMenu & JSXBase.HTMLAttributes<HTMLMdlMenuElement>;
            "mdl-sidebar": LocalJSX.MdlSidebar & JSXBase.HTMLAttributes<HTMLMdlSidebarElement>;
        }
    }
}
